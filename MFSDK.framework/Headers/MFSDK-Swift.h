// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MFSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC5MFSDK11InvoiceItem")
@interface InvoiceItem : NSObject
@end

typedef SWIFT_ENUM(NSInteger, MFAPILanguage, closed) {
  MFAPILanguageArabic = 0,
  MFAPILanguageEnglish = 1,
};

typedef SWIFT_ENUM(NSInteger, MFCountry, closed) {
  MFCountryKuwait = 1,
  MFCountrySaudiArabia = 2,
  MFCountryBahrain = 3,
  MFCountryUAE = 4,
  MFCountryQatar = 5,
  MFCountryOman = 6,
  MFCountryJordan = 7,
};

typedef SWIFT_ENUM(NSInteger, MFCurrency, closed) {
  MFCurrencyCuban_Convertible_Peso_CUC = 0,
  MFCurrencyFalkland_Islands_Pound_FKP = 1,
  MFCurrencyIndonesian_Rupiah_IDR = 2,
  MFCurrencyBrazilian_Real_BRL = 3,
  MFCurrencyCosta_Rican_Colón_CRC = 4,
  MFCurrencyMaldivian_Rufiyaa_MVR = 5,
  MFCurrencyBrunei_Dollar_BND = 6,
  MFCurrencyRomanian_Leu_RON = 7,
  MFCurrencyYemeni_Rial_YER = 8,
  MFCurrencyLesotho_Loti_LSL = 9,
  MFCurrencyMongolian_Tugrik_MNT = 10,
  MFCurrencyPapua_New_Guinean_Kina_PGK = 11,
  MFCurrencyLiberian_Dollar_LRD = 12,
  MFCurrencyVenezuelan_Bolívar_Soberano_VES = 13,
  MFCurrencyCape_Verdean_Escudo_CVE = 14,
  MFCurrencyPalladium_Ounce_XPD = 15,
  MFCurrencyHaitian_Gourde_HTG = 16,
  MFCurrencySaint_Helena_Pound_SHP = 17,
  MFCurrencyKenyan_Shilling_KES = 18,
  MFCurrencyMoldovan_Leu_MDL = 19,
  MFCurrencyKyrgystani_Som_KGS = 20,
  MFCurrencyNew_Zealand_Dollar_NZD = 21,
  MFCurrencyJersey_Pound_JEP = 22,
  MFCurrencyMacanese_Pataca_MOP = 23,
  MFCurrencyMoroccan_Dirham_MAD = 24,
  MFCurrencyEthiopian_Birr_ETB = 25,
  MFCurrencyTurkish_Lira_TRY = 26,
  MFCurrencyZambian_Kwacha_ZMW = 27,
  MFCurrencyEast_Caribbean_Dollar_XCD = 28,
  MFCurrencyLibyan_Dinar_LYD = 29,
  MFCurrencySudanese_Pound_SDG = 30,
  MFCurrencyTanzanian_Shilling_TZS = 31,
  MFCurrencyVanuatu_Vatu_VUV = 32,
  MFCurrencyPlatinum_Ounce_XPT = 33,
  MFCurrencyFijian_Dollar_FJD = 34,
  MFCurrencySaoTomAndPrincipeDobraSTD = 35,
  MFCurrencyPolish_Zloty_PLN = 36,
  MFCurrencyKuwaiti_Dinar_KWD = 37,
  MFCurrencyCanadian_Dollar_CAD = 38,
  MFCurrencyGuernsey_Pound_GGP = 39,
  MFCurrencyChilean_Unit_of_Account_UF_CLF = 40,
  MFCurrencyEritrean_Nakfa_ERN = 41,
  MFCurrencySomali_Shilling_SOS = 42,
  MFCurrencyBotswanan_Pula_BWP = 43,
  MFCurrencyBelize_Dollar_BZD = 44,
  MFCurrencySalvadoran_Colón_SVC = 45,
  MFCurrencySão_Tomé_and_Príncipe_Dobra_STN = 46,
  MFCurrencyAzerbaijani_Manat_AZN = 47,
  MFCurrencyBarbadian_Dollar_BBD = 48,
  MFCurrencyMauritian_Rupee_MUR = 49,
  MFCurrencySpecial_Drawing_Rights_XDR = 50,
  MFCurrencyLaotian_Kip_LAK = 51,
  MFCurrencySwazi_Lilangeni_SZL = 52,
  MFCurrencyCzech_Republic_Koruna_CZK = 53,
  MFCurrencyMexican_Peso_MXN = 54,
  MFCurrencyCFP_Franc_XPF = 55,
  MFCurrencyJamaican_Dollar_JMD = 56,
  MFCurrencyBurundian_Franc_BIF = 57,
  MFCurrencyGibraltar_Pound_GIP = 58,
  MFCurrencyNamibian_Dollar_NAD = 59,
  MFCurrencySyrian_Pound_SYP = 60,
  MFCurrencySurinamese_Dollar_SRD = 61,
  MFCurrencyCFA_Franc_BEAC_XAF = 62,
  MFCurrencyNorth_Korean_Won_KPW = 63,
  MFCurrencyNorwegian_Krone_NOK = 64,
  MFCurrencySingapore_Dollar_SGD = 65,
  MFCurrencyBhutanese_Ngultrum_BTN = 66,
  MFCurrencyChinese_Yuan_CNY = 67,
  MFCurrencyMalaysian_Ringgit_MYR = 68,
  MFCurrencyQatari_Rial_QAR = 69,
  MFCurrencyAfghan_Afghani_AFN = 70,
  MFCurrencyBosniaHerzegovinaConvertibleMarkBAM = 71,
  MFCurrencyDanish_Krone_DKK = 72,
  MFCurrencyUnited_States_Dollar_USD = 73,
  MFCurrencySouth_Korean_Won_KRW = 74,
  MFCurrencyChilean_Peso_CLP = 75,
  MFCurrencyGuatemalan_Quetzal_GTQ = 76,
  MFCurrencySerbian_Dinar_RSD = 77,
  MFCurrencyTurkmenistani_Manat_TMT = 78,
  MFCurrencyArmenian_Dram_AMD = 79,
  MFCurrencyMauritanianOuguiyaMRO = 80,
  MFCurrencySolomon_Islands_Dollar_SBD = 81,
  MFCurrencyBelarusian_Ruble_BYN = 82,
  MFCurrencyBangladeshi_Taka_BDT = 83,
  MFCurrencyEuro_EUR = 84,
  MFCurrencyMalawian_Kwacha_MWK = 85,
  MFCurrencyPakistani_Rupee_PKR = 86,
  MFCurrencySouth_African_Rand_ZAR = 87,
  MFCurrencyZimbabwean_Dollar_ZWL = 88,
  MFCurrencyBolivian_Boliviano_BOB = 89,
  MFCurrencyGold_Ounce_XAU = 90,
  MFCurrencyTrinidad_and_Tobago_Dollar_TTD = 91,
  MFCurrencyPeruvian_Nuevo_Sol_PEN = 92,
  MFCurrencyAustralian_Dollar_AUD = 93,
  MFCurrencySri_Lankan_Rupee_LKR = 94,
  MFCurrencySierra_Leonean_Leone_SLL = 95,
  MFCurrencyIsraeli_New_Sheqel_ILS = 96,
  MFCurrencyBitcoin_BTC = 97,
  MFCurrencyLebanese_Pound_LBP = 98,
  MFCurrencyRwandan_Franc_RWF = 99,
  MFCurrencyCroatian_Kuna_HRK = 100,
  MFCurrencyHonduran_Lempira_HNL = 101,
  MFCurrencyBermudan_Dollar_BMD = 102,
  MFCurrencyJordanian_Dinar_JOD = 103,
  MFCurrencyVenezuelan_Bolívar_Fuerte_Old_VEF = 104,
  MFCurrencyCongolese_Franc_CDF = 105,
  MFCurrencyGuinean_Franc_GNF = 106,
  MFCurrencyIndian_Rupee_INR = 107,
  MFCurrencyBritish_Pound_Sterling_GBP = 108,
  MFCurrencySamoan_Tala_WST = 109,
  MFCurrencyNetherlands_Antillean_Guilder_ANG = 110,
  MFCurrencyManx_pound_IMP = 111,
  MFCurrencyOmani_Rial_OMR = 112,
  MFCurrencyUnited_Arab_Emirates_Dirham_AED = 113,
  MFCurrencyNicaraguan_Córdoba_NIO = 114,
  MFCurrencyAlgerian_Dinar_DZD = 115,
  MFCurrencySouth_Sudanese_Pound_SSP = 116,
  MFCurrencySwiss_Franc_CHF = 117,
  MFCurrencyBulgarian_Lev_BGN = 118,
  MFCurrencyEgyptian_Pound_EGP = 119,
  MFCurrencyCayman_Islands_Dollar_KYD = 120,
  MFCurrencyMauritanian_Ouguiya_MRU = 121,
  MFCurrencyJapanese_Yen_JPY = 122,
  MFCurrencyPhilippine_Peso_PHP = 123,
  MFCurrencyParaguayan_Guarani_PYG = 124,
  MFCurrencySwedish_Krona_SEK = 125,
  MFCurrencyCuban_Peso_CUP = 126,
  MFCurrencyHong_Kong_Dollar_HKD = 127,
  MFCurrencyIraqi_Dinar_IQD = 128,
  MFCurrencyDominican_Peso_DOP = 129,
  MFCurrencyKazakhstani_Tenge_KZT = 130,
  MFCurrencyHungarian_Forint_HUF = 131,
  MFCurrencyNigerian_Naira_NGN = 132,
  MFCurrencyNew_Taiwan_Dollar_TWD = 133,
  MFCurrencyNepalese_Rupee_NPR = 134,
  MFCurrencyUgandan_Shilling_UGX = 135,
  MFCurrencySilver_Ounce_XAG = 136,
  MFCurrencyAngolan_Kwanza_AOA = 137,
  MFCurrencyComorian_Franc_KMF = 138,
  MFCurrencyMyanma_Kyat_MMK = 139,
  MFCurrencyCFA_Franc_BCEAO_XOF = 140,
  MFCurrencyGeorgian_Lari_GEL = 141,
  MFCurrencyBahraini_Dinar_BHD = 142,
  MFCurrencyGambian_Dalasi_GMD = 143,
  MFCurrencySeychellois_Rupee_SCR = 144,
  MFCurrencyTunisian_Dinar_TND = 145,
  MFCurrencyCambodian_Riel_KHR = 146,
  MFCurrencyChinese_Yuan_Offshore_CNH = 147,
  MFCurrencyArgentine_Peso_ARS = 148,
  MFCurrencyTajikistani_Somoni_TJS = 149,
  MFCurrencyRussian_Ruble_RUB = 150,
  MFCurrencyGhanaian_Cedi_GHS = 151,
  MFCurrencyGuyanaese_Dollar_GYD = 152,
  MFCurrencyDjiboutian_Franc_DJF = 153,
  MFCurrencyMozambican_Metical_MZN = 154,
  MFCurrencyUkrainian_Hryvnia_UAH = 155,
  MFCurrencyBahamian_Dollar_BSD = 156,
  MFCurrencyAruban_Florin_AWG = 157,
  MFCurrencyVietnamese_Dong_VND = 158,
  MFCurrencyIcelandic_Króna_ISK = 159,
  MFCurrencyUzbekistan_Som_UZS = 160,
  MFCurrencyThai_Baht_THB = 161,
  MFCurrencyUruguayan_Peso_UYU = 162,
  MFCurrencyMacedonian_Denar_MKD = 163,
  MFCurrencyMalagasy_Ariary_MGA = 164,
  MFCurrencyColombian_Peso_COP = 165,
  MFCurrencyPanamanian_Balboa_PAB = 166,
  MFCurrencyIranian_Rial_IRR = 167,
  MFCurrencyTonganPangaTOP = 168,
  MFCurrencySaudi_Riyal_SAR = 169,
  MFCurrencyAlbanian_Lek_ALL = 170,
};


SWIFT_CLASS("_TtC5MFSDK14MFFailResponse")
@interface MFFailResponse : NSObject
@property (nonatomic, readonly) NSInteger statusCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MFInvoiceOption : NSInteger;
@class MFProduct;
enum MFLanguage : NSInteger;

SWIFT_CLASS("_TtC5MFSDK9MFInvoice")
@interface MFInvoice : NSObject
@property (nonatomic) double invoiceValue;
@property (nonatomic, copy) NSString * _Nonnull customerName;
@property (nonatomic) NSInteger countryCodeId;
@property (nonatomic, copy) NSString * _Nonnull displayCurrencyIsoAlpha;
@property (nonatomic, copy) NSString * _Nonnull customerBlock;
@property (nonatomic, copy) NSString * _Nonnull customerStreet;
@property (nonatomic, copy) NSString * _Nonnull customerHouseBuildingNo;
@property (nonatomic, copy) NSString * _Nonnull customerCivilId;
@property (nonatomic, copy) NSString * _Nonnull customerAddress;
@property (nonatomic, copy) NSString * _Nonnull customerReference;
@property (nonatomic, copy) NSString * _Nonnull customerEmail;
@property (nonatomic, copy) NSString * _Nonnull customerMobile;
@property (nonatomic) enum MFInvoiceOption sendInvoiceOption;
@property (nonatomic, copy) NSArray<MFProduct *> * _Nonnull invoiceItems;
@property (nonatomic) enum MFLanguage language;
@property (nonatomic, copy) NSString * _Nonnull expireDate;
@property (nonatomic, copy) NSString * _Nonnull apiCustomFileds;
@property (nonatomic, copy) NSString * _Nonnull errorUrl;
- (nonnull instancetype)initWithInvoiceValue:(double)invoiceValue customerName:(NSString * _Nonnull)customerName countryCode:(enum MFCountry)countryCode displayCurrency:(enum MFCurrency)displayCurrency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MFInvoiceCreateStatusDelegate;

SWIFT_CLASS("_TtC5MFSDK21MFInvoiceCreateStatus")
@interface MFInvoiceCreateStatus : NSObject <NSURLConnectionDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MFInvoiceCreateStatus * _Nonnull shared;)
+ (MFInvoiceCreateStatus * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <MFInvoiceCreateStatusDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MFTransaction;

SWIFT_PROTOCOL("_TtP5MFSDK29MFInvoiceCreateStatusDelegate_")
@protocol MFInvoiceCreateStatusDelegate
- (void)didInvoiceCreateSucessWithTransaction:(MFTransaction * _Nonnull)transaction;
- (void)didInvoiceCreateFailWithError:(MFFailResponse * _Nonnull)error;
- (void)didPaymentCancel;
@end

typedef SWIFT_ENUM(NSInteger, MFInvoiceOption, closed) {
  MFInvoiceOptionSms = 1,
  MFInvoiceOptionEmail = 2,
  MFInvoiceOptionSmsAndEmail = 3,
  MFInvoiceOptionLink = 4,
};

typedef SWIFT_ENUM(NSInteger, MFLanguage, closed) {
  MFLanguageArabic = 1,
  MFLanguageEnglish = 2,
};

typedef SWIFT_ENUM(NSInteger, MFPaymentMethod, closed) {
  MFPaymentMethodAll = 0,
  MFPaymentMethodKnet = 1,
  MFPaymentMethodMada = 2,
  MFPaymentMethodVisaMaster = 3,
  MFPaymentMethodSadat = 4,
  MFPaymentMethodBenefit = 5,
  MFPaymentMethodDebitCardUAE = 6,
  MFPaymentMethodQatarDebitCard = 7,
  MFPaymentMethodMpgs = 8,
  MFPaymentMethodAmex = 9,
};


SWIFT_CLASS("_TtC5MFSDK16MFPaymentRequest")
@interface MFPaymentRequest : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MFPaymentRequest * _Nonnull shared;)
+ (MFPaymentRequest * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)createInvoiceWithInvoice:(MFInvoice * _Nonnull)invoice paymentMethod:(enum MFPaymentMethod)paymentMethod apiLanguage:(enum MFAPILanguage)apiLanguage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5MFSDK9MFProduct")
@interface MFProduct : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MFTheme;

SWIFT_CLASS("_TtC5MFSDK10MFSettings")
@interface MFSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MFSettings * _Nonnull shared;)
+ (MFSettings * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)configureWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password baseURL:(NSString * _Nonnull)baseURL;
- (void)setThemeWithTheme:(MFTheme * _Nonnull)theme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC5MFSDK7MFTheme")
@interface MFTheme : NSObject
@property (nonatomic, strong) UIColor * _Nonnull navigationTintColor;
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
@property (nonatomic, copy) NSString * _Nonnull navigationTitle;
@property (nonatomic, copy) NSString * _Nonnull cancelButtonTitle;
- (nonnull instancetype)initWithNavigationTintColor:(UIColor * _Nonnull)navigationTintColor navigationBarTintColor:(UIColor * _Nonnull)navigationBarTintColor navigationTitle:(NSString * _Nonnull)navigationTitle cancelButtonTitle:(NSString * _Nonnull)cancelButtonTitle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC5MFSDK13MFTransaction")
@interface MFTransaction : NSObject
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
